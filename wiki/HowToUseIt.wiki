#summary How to use it

= Introduction =

There are two typical way to use this products: single and periodical dispatch.

= Usage =

After installation you have a 'bin' directory containing these scrips:

  * generate

        Take a directory containing the configuration to generate the mails for
        maildrophost. The newsletter.cfg must containing the path to 'spool'
        directory of maildrophost instance.

      Options:

        -h, --help

            Show this help message and exit

        -a {{{<address>}}}, --address {{{<address>}}}

            Generate mail to specified address

        -f, --force

            Force generation of mails. Override control on generated.info file

        -c, --container

            Treat the path as a container of newsletter configurations.

        -p, --purge  Remove emails

            This option is used to remove mails from the csv file, this is useful
            in case of periodical dispatching to avoid to send again the mails.
            (with date and generated.info file this option is obsolete)

  * maildrophost

        It is the daemon that send emails. The commands are: start, stop, restart.

  * catcher

        It is a wsgi service. It takes the http request about the image, extracts
        the newsletter id and email id, update the database.

  * nicespammer_db_setup

        It generates the sqlie DB for stats. It takes the path to the file.

== Configuration file ==

The newsletter folder must contain a 'newsletter.cfg' file. The file is a
configuration file (same as INI files), for example:

{{{
    [default]
    mfrom = riccardo@reflab.it
    subject = Newsletter Test.
    txt = mail_body.txt
    html = newsletter_path.html
    spool = /tmp/kde-axa
    mails = mails.csv
    date = 2010/01/27 13:00
    stats = True
    newsletter-name = alphanum             (required if stats==True)
}}}

where:

  mfrom: mail from address

  subject: the subject of the mail

  txt: the file containing the text version

  html: the file containing the html version

  spool: the path to the spool directory of maildrophost

  mails: a csv file with the mail of the users (must have a 'mail' column)

  date: the date when the newsletter mails must be generate (optional)

    After generation a file 'generated.info' is created in the folder and the
    presence will be checked each time the generate script is called on this
    folder.

  stats: activate the statistics  (todo)

    Default: False  and it is not required.

  newsletter-name: the name of the newsletter (todo)

    Must be unique in the DB, it is required if 'stats' is True


== Single dispatch ==

Activate maildrophost then call 'generate /path/to/newsletter/configuration'

== Periodical dispatch ==

Activate maildrophost then put 'generate -p /path/to/newsletter/configuration'
in a crontab entry, for example:

{{{
# m h  dom mon dow   command
00 * * * * /srv/mailer/bin/generate --purge /tmp/a_newsletterconf/
}}}

or configure 'date' in newsletter.cfg and remove the --purge option.

== How to use statistic module ==

Create the DB with the command:

  $ ./bin/nicespammer_db_setup newsletters.db

then activate the module adding the variables in the newsletter configuration:

  [default]
  ...
  stats = True
  newsletter-name = my newsletter
  ...

Before start the wsgi service (catcher) add the DB path in the nicespammer
configuration file:

    [default]
    ...
    filename = ./newsletter.db
    ...


and fix the url used in the generated emails:

    catcher_url = http://a.serv.er/

    Note: the catcher url can be server through Apache and differ from the
      host/port parameters.

then you can start the server:

    $ ./bin/catcher nicespammer.cfg


== Mail Template ==

You can add some mark in the template using the $ notation. The data are read
from the csv file. For example:

  Hi $name,
  how are you?

in the csv file you need to have the columns: mail, name
Note: the 'mail' column is mandatory.